
x = [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, ...
     1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
     0, 1, 1, 1, 1, 1, 1, 1, 1, 1]; % truth

p_baseline = [0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, ...
              0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, ...
              0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, ...
              0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, ...
              0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55];

p_enhanced = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, ...
              0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, ...
              0.5, 0.5, 0.5, 0.5, 0.9, 0.9, 0.9, 0.9, ...
              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, ...
              0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9];

% Calculate the log-likelihood
a0 = exp(sum(log(p_baseline) .* x + ...
    log(1 - p_baseline) .*(1 - x)) / length(x));
a1 = exp(sum(log(p_enhanced) .* x + ...
    log(1 - p_enhanced) .* (1 - x)) / length(x));

% Calculate 'w' using optimization
options = optimset('fmincon');
options.TolFun = 0;
options.TolCon = 1e-9;

% Function to be minimized
minimize_me = @(p, a) abs(p * log(p) + (1 - p) * log(1 - p) - log(a));

% Calculate 'w' using optimization
res0 = fmincon(@(p) minimize_me(p, a0), 0.5, [], ...
               [], [], [], 0.001, 0.999, [], options);
res1 = fmincon(@(p) minimize_me(p, a1), 0.5, [], [], ...
               [], [], 0.001, 0.999, [], options);

w0 = res0(1);
w1 = res1(1);

% Calculate the e(w) metric
ew = (w1 - w0) / w0;
fprintf('E(W) using fmincon is: %f\n', ew);